module psi_cache {
  extern module messages;
  readonly CProxy_PsiCache psi_cache_proxy;

  nodegroup PsiCache {
    entry PsiCache();
    entry [exclusive] void receivePsi(PsiMessage*);
    entry [exclusive] void receiveGppV(GppVMessage*);
    entry [exclusive] void receiveGppE(GppEMessage*);
    entry [exclusive] void receiveGppO(GppEMessage*);
    entry [exclusive] void send_rhodata(PsiMessage*);
    entry [exclusive] void computeFs(PsiMessage*);
    entry void reportFTime();
    entry void setVCoulb(std::vector<double>, double, std::vector<double> _ga, std::vector<double> _gb, std::vector<double>_gc, int ng);
    entry void setQIndex(int qindex);
    entry void reportInfo();
  };

};
