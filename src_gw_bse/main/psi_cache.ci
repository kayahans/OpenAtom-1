module psi_cache {
  extern module messages;
  extern module eps_matrix;

  readonly CProxy_PsiCache psi_cache_proxy;

  nodegroup PsiCache {
    entry PsiCache();
    entry [exclusive] void receivePsi(PsiMessage*);
    entry [exclusive] void computeFs(PsiMessage*);
    entry void reportFTime();
    entry void setVCoulb(std::vector<double>, double);
    entry void setQIndex(int qindex);
    entry void reportInfo();
  };
  
  group DiagBridge{
    entry DiagBridge();

    entry [reductiontarget] void waitForQuiescence (int totalcents);
    entry void transferControlToMPI();
    entry void receiveFromDiagonalizer();
    entry void sendToDiagonalizer();
    entry void copyFromMPI();
    entry void print_simple();
    entry void copyToMPI(int qindex, int real_epsilon_size);
    entry void prepareData(int qindex, int size);
    // entry void receiveData(int x, int y, std::vector<complex> data_in, int data_size, int rows, int cols, int dest_pe, int sending_pe);
    entry void receiveDataSimple(DiagMessage* msg);
  };

};
