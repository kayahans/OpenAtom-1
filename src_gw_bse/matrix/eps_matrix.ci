module eps_matrix {
  include "ckcomplex.h";
  include "CLA_Matrix.h";

  extern module matrix;
  extern module messages;
  extern module psi_cache;

  array [2D] EpsMatrix : Matrix {
    entry EpsMatrix();
    entry EpsMatrix(MatrixConfig config);
    entry void createTranspose(CProxy_EpsMatrix other, bool todo);
    entry void createConjugate(CProxy_EpsMatrix other);
    entry void receiveTranspose(std::vector<complex> incoming);
    entry void receiveConjugate(std::vector<complex> incoming);
    entry void multiply(double alpha, double beta);
    entry void round_done();
    entry void scalar_multiply(double alpha);
    entry void add_compl_two();
    entry void convergence_check(CProxy_EpsMatrix cmp_proxy);
    entry void receiveConvCheck(std::vector<complex> incoming);
    entry void setI(CLA_Matrix_interface mat, bool clean);
    entry void receiveFs(Phase3Message*);
    entry void bareExchange();
    entry void screenedExchange();
    entry void coh();
    entry void findAlpha();
    entry void multiply_coulb();
    entry [reductiontarget] void done(int result);
    entry void createCopy(CProxy_EpsMatrix other, bool todo);
    entry void recvCopy(std::vector<complex> new_data);
    entry [sync] DiagMessage* receiveDataSimple();
    entry void receiveHeapSimple();
    // entry void copyFromMPI(int qindex, int epsilon_size, CProxy_DiagBridge diag_proxy) {
    // };
    // entry void copyToMPI(int qindex, int epsilon_size, CProxy_DiagBridge diag_proxy);

    entry void pdgemmSendInput(CProxy_EpsMatrix output, bool aOrB) {
      serial {
        if (aOrB)
          output(thisIndex.x, (thisIndex.y-thisIndex.x+numBlocks)%numBlocks).inputA(0, data, blockSize, blockSize, thisIndex.x, thisIndex.y);
        else
          output((thisIndex.x-thisIndex.y+numBlocks)%numBlocks, thisIndex.y).inputB(0, data, blockSize, blockSize, thisIndex.x, thisIndex.y);
      }
    };

    entry void pdgemmRun(double alpha, CkCallback done) {
      serial {
        delete [] data;
        initialize();
      }

      forall [block] (0:numBlocks-1,1) {
        when
          inputA[block](int blockIdA, complex blockA[M*KA], unsigned int M, unsigned int KA, int a_index_x, int a_index_y),
          inputB[block](int blockIdB, complex blockB[KB*N], unsigned int KB, unsigned int N, int b_index_x, int b_index_y)
          serial {
          CkAssert(KA == KB);
//          CkPrintf("\n C[%d,%d] received A[%d,%d], B[%d,%d]", thisIndex.x, thisIndex.y, a_index_x, a_index_y, b_index_x, b_index_y);

          // This DGEMM makes no attempt at optimization. For
          // benchmarking, it should be replaced with a library
          // call. The local version is kept for easy portability.
          example_dgemm(M, N, KA,
                        alpha,
                        blockA, blockB, data);
          if (blockIdA != numBlocks) {
            int destX = thisIndex.x;
            int destY = (thisIndex.y + 1) % numBlocks;
            thisProxy(destX, destY).inputA(blockIdA+1, blockA, M, KA, a_index_x, a_index_y);
          }
          if (blockIdB != numBlocks) {
            int destX = (thisIndex.x + 1) % numBlocks;
            int destY = thisIndex.y;
            thisProxy(destX, destY).inputB(blockIdB+1, blockB, KB, N, b_index_x, b_index_y);
          }
        }
      }
      serial {
        contribute(done);
      }
    };
    entry void inputA(int blockIdA, complex blockA[M*KA], unsigned int M, unsigned int KA, int a_index_x, int a_index_y);
    entry void inputB(int blockIdB, complex blockB[KB*N], unsigned int KB, unsigned int N, int b_index_x, int b_index_y);
  };
  // end array EpsMatrix

  group DiagBridge{
    entry DiagBridge();
    entry void prepareData(int qindex, int size);
    entry void copyToDMPI(int qindex, int real_epsilon_size, CProxy_EpsMatrix smatrix_proxy) {
      serial {
        int mype = CkMyPe();
        int numBlocks = 7;
        // int eps_rows = 20;
        // int eps_cols = 20;
        for (int mat_x = 0; mat_x < numBlocks; mat_x++) {
          for (int mat_y = 0; mat_y < numBlocks; mat_y++) { 
            int dest_pe_row = mat_x%2;
            int dest_pe_col = mat_y%2;
            int dest_pe = dest_pe_row*2 + dest_pe_col;
            
            if (mype == dest_pe) {
              bool borderX = false;
              bool borderY = false;  

              if (mat_x + 1 == numBlocks) {
                borderX = true;
              }
              if (mat_y + 1 == numBlocks) {
                borderY = true;
              }
              int dataSize = -1;
              int remElems2 = real_epsilon_size % eps_rows;  // eps_rows = eps_col square matrix
              int stdElems = eps_rows * eps_cols;
              int remElems = remElems2 * eps_rows;
              int cornerElems = remElems2 * remElems2;

              int rows = 0;
              int cols = 0;
              if (borderX && !borderY) {
                dataSize = remElems;
                rows = remElems2;
                cols = eps_rows;
              } else if (!borderX && borderY) {
                dataSize = remElems;
                rows = eps_rows;
                cols = remElems2;
              } else if (borderX && borderY) {
                dataSize = cornerElems;
                rows = remElems2;
                cols = remElems2;
              } else {
                dataSize = stdElems;
                rows = eps_rows;
                cols = eps_rows;
              }
              CkPrintf("[copyToDMPI] x %d y %d curr_pe %d size %d rows %d columns %d\n", mat_x, mat_y, CkMyPe(), dataSize, rows, cols);
              DiagMessage* msg; 
              msg = smatrix_proxy(mat_x, mat_y).receiveDataSimple();
              CkPrintf("[returnToDMPI] x %d y %d pe %d\n", msg->x, msg->y, msg->dest_pe);
              // delete msg;
            }
          }
        }
      }
    }
  };
  // end group DiagBridge



};
